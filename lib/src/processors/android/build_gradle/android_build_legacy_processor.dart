/*
 * Copyright (c) 2024 Angelo Cassano
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

import 'package:flutter_flavorizr/src/exception/existing_flavor_dimensions_exception.dart';
import 'package:flutter_flavorizr/src/exception/malformed_resource_exception.dart';
import 'package:flutter_flavorizr/src/processors/commons/string_processor.dart';

class AndroidBuildLegacyProcessor extends StringProcessor {
  static const _androidEntryPoint = 'android {';
  static const _flavorDimensions = 'flavorDimensions';
  static const _beginFlavorDimensionsMarkup =
      '// ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----';
  static const _endFlavorDimensionsMarkup =
      '// ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----';

  final String _gradleFileName;

  AndroidBuildLegacyProcessor(
    this._gradleFileName, {
    super.input,
    required super.config,
    required super.logger,
  });

  @override
  String execute() {
    final androidPosition = input!.indexOf(_androidEntryPoint);
    final existingFlavorDimensions = input!.contains(_flavorDimensions);
    final beginFlavorDimensionsMarkupPosition =
        input!.indexOf(_beginFlavorDimensionsMarkup);
    final endFlavorDimensionsMarkupPosition =
        input!.indexOf(_endFlavorDimensionsMarkup);

    if (androidPosition < 0) {
      logger.detail(
        '[$AndroidBuildLegacyProcessor] No android entry point found',
        style: logger.theme.err,
      );

      throw MalformedResourceException(input!);
    }

    if (existingFlavorDimensions &&
        (beginFlavorDimensionsMarkupPosition < 0 ||
            endFlavorDimensionsMarkupPosition < 0)) {
      logger.detail(
        '[$AndroidBuildLegacyProcessor] Existing flavorDimensions found but no markup',
        style: logger.theme.err,
      );

      throw ExistingFlavorDimensionsException(input!);
    }

    final buffer = StringBuffer();

    logger.detail(
      '[$AndroidBuildLegacyProcessor] Cleaning up existing flavors',
      style: logger.theme.info,
    );

    _cleanupFlavors(
      buffer,
      beginFlavorDimensionsMarkupPosition,
      endFlavorDimensionsMarkupPosition,
    );

    logger.detail(
      '[$AndroidBuildLegacyProcessor] Adding new gradle flavors file',
      style: logger.theme.info,
    );

    _appendContent(buffer);

    return buffer.toString();
  }

  void _cleanupFlavors(
    StringBuffer buffer,
    int beginFlavorDimensionsMarkupPosition,
    endFlavorDimensionsMarkupPosition,
  ) {
    final escapedBegin = RegExp.escape(_beginFlavorDimensionsMarkup);
    final escapedEnd = RegExp.escape(_endFlavorDimensionsMarkup);

    final regex = RegExp(
      r'^[ \t]*' + escapedBegin + r'\n.*?\n[ \t]*' + escapedEnd + r'\n?',
      dotAll: true,
      multiLine: true,
    );

    input = input?.replaceAll(regex, '');
  }

  void _appendContent(StringBuffer buffer) {
    if (input?.endsWith('\n') ?? false) {
      buffer.write(input);
    } else {
      buffer.writeln(input);
    }
    buffer.writeln(_beginFlavorDimensionsMarkup);
    buffer.writeln('apply from: "$_gradleFileName"');
    buffer.write(_endFlavorDimensionsMarkup);
  }

  @override
  String toString() => 'AndroidBuildLegacyProcessor';
}
